// Generated file. Do not edit.

plugins {
    id "com.android.library"
    id "dev.flutter.flutter-gradle-plugin"

}

def localProperties = new Properties()
def localPropertiesFile = new File(buildscript.sourceFile.parentFile.parentFile, "local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

group = "sak-coder/myphsar_module"
version = "1.0"

android {
    namespace = "com.myphsar.myphsar_module"
    compileSdk = flutter.compileSdkVersion
    ndkVersion =  "29.0.13846066"
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    defaultConfig {
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }
}


// Dynamic Flutter SDK path detection
def getFlutterRoot() {
    // First try environment variable
    def flutterRoot = System.getenv('FLUTTER_HOME')
    if (flutterRoot != null) {
        println "Using Flutter SDK from FLUTTER_HOME: $flutterRoot"
        return flutterRoot
    }

    // Then try local.properties (for local development)
    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file('local.properties')
    if (localPropertiesFile.exists()) {
        localPropertiesFile.withReader('UTF-8') { reader ->
            localProperties.load(reader)
        }
        flutterRoot = localProperties.getProperty('flutter.sdk')
        if (flutterRoot != null) {
            println "Using Flutter SDK from local.properties: $flutterRoot"
            return flutterRoot
        }
    }

    // For JitPack/CI, use downloaded Flutter
    flutterRoot = "/tmp/flutter-${flutter_version}"
    println "Using default Flutter SDK path: $flutterRoot"
    return flutterRoot
}

def flutterRoot = getFlutterRoot()

flutter {
    source = "../.."
}
